{"version":3,"file":"NativeTabsView.web.js","sourceRoot":"","sources":["../../../src/native-tabs/NativeBottomTabs/NativeTabsView.web.tsx"],"names":[],"mappings":";;;;;AAOA,wCA+EC;AAtFD,uCAA0C;AAC1C,kDAA0B;AAC1B,+CAAoC;AAGpC,mCAA6C;AAE7C,SAAgB,cAAc,CAAC,KAA0B;IACvD,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IAC1B,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IACnD,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IAEzB,MAAM,KAAK,GAAG,MAAM;SACjB,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,IAAA,0BAAkB,EAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;SACjE,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CACrB,CAAC,OAAO,CACN,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACf,SAAS,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,CACjC,KAAK,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,CAC1D,OAAO,CAAC,CAAC,GAAG,EAAE;YACZ,UAAU,CAAC,QAAQ,CAAC;gBAClB,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,KAAK,CAAC,GAAG;gBACjB,OAAO,EAAE;oBACP,IAAI,EAAE,KAAK,CAAC,IAAI;iBACjB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,EACF,CACH,CAAC,CAAC;IACL,MAAM,QAAQ,GAAG,MAAM;SACpB,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;SACrF,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACpB,OAAO,CACL,CAAC,GAAG,CACF,KAAK,CAAC,CAAC;gBACL,IAAI,EAAE,CAAC;gBACP,OAAO,EAAE,MAAM;aAChB,CAAC,CACF;UAAA,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAClC;QAAA,EAAE,GAAG,CAAC,CACP,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,OAAO,CACL,CAAC,GAAG,CACF,KAAK,CAAC,CAAC;YACL,IAAI,EAAE,CAAC;YACP,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,QAAQ;SACxB,CAAC,CACF;MAAA,CAAC,yBAAc,CAAC,IAAI,CAClB,KAAK,CAAC,CAAC;YACL,GAAG,EAAE,EAAE;YACP,IAAI,EAAE,KAAK;YACX,SAAS,EAAE,kBAAkB;YAC7B,QAAQ,EAAE,OAAO;YACjB,MAAM,EAAE,EAAE;SACX,CAAC,CACF;QAAA,CAAC,yBAAc,CAAC,IAAI,CAClB,KAAK,CAAC,CAAC;YACL,OAAO,EAAE,MAAM;YACf,eAAe,EAAE,SAAS;YAC1B,MAAM,EAAE,EAAE;YACV,YAAY,EAAE,EAAE;YAChB,UAAU,EAAE,QAAQ;YACpB,cAAc,EAAE,QAAQ;YACxB,OAAO,EAAE,CAAC;YACV,SAAS,EAAE,YAAY;YACvB,MAAM,EAAE,CAAC;SACV,CAAC,CACF;UAAA,CAAC,KAAK,CACR;QAAA,EAAE,yBAAc,CAAC,IAAI,CACvB;MAAA,EAAE,yBAAc,CAAC,IAAI,CACrB;MAAA,CAAC,GAAG,CACF,KAAK,CAAC,CAAC;YACL,IAAI,EAAE,CAAC;YACP,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,QAAQ;YACvB,MAAM,EAAE,CAAC;YACT,SAAS,EAAE,MAAM;SAClB,CAAC,CACF;QAAA,CAAC,QAAQ,CACX;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC;AAQD,SAAS,OAAO,CAAC,KAAmB;IAClC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;IAC5C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAExD,OAAO,CACL,CAAC,yBAAc,CAAC,IAAI,CAClB,KAAK,CAAC,CAAC;YACL,SAAS,EAAE,MAAM;YACjB,MAAM,EAAE,CAAC;YACT,OAAO,EAAE,CAAC;YACV,iBAAiB,EAAE,QAAQ;YAC3B,MAAM,EAAE,MAAM;SACf,CAAC,CACF;MAAA,CAAC,yBAAc,CAAC,OAAO,CACrB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CACvC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CACxC,KAAK,CAAC,CAAC;YACL,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa;YACtD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,CAAC;YACT,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,EAAE;YAChB,OAAO,EAAE,QAAQ;YACjB,MAAM,EAAE,SAAS;YACjB,YAAY,EAAE,SAAS;SACxB,CAAC,CACF;QAAA,CAAC,mBAAI,CACH,KAAK,CAAC,CAAC;YACL,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;YAC9D,UAAU,EAAE,GAAG;YACf,QAAQ,EAAE,EAAE;SACb,CAAC,CACF;UAAA,CAAC,KAAK,CACR;QAAA,EAAE,mBAAI,CACR;MAAA,EAAE,yBAAc,CAAC,OAAO,CAC1B;IAAA,EAAE,yBAAc,CAAC,IAAI,CAAC,CACvB,CAAC;AACJ,CAAC","sourcesContent":["import { NavigationMenu } from 'radix-ui';\nimport React from 'react';\nimport { Text } from 'react-native';\n\nimport type { NativeTabsViewProps } from './types';\nimport { shouldTabBeVisible } from './utils';\n\nexport function NativeTabsView(props: NativeTabsViewProps) {\n  const { builder } = props;\n  const { state, descriptors, navigation } = builder;\n  const { routes } = state;\n\n  const items = routes\n    .filter(({ key }) => shouldTabBeVisible(descriptors[key].options))\n    .map((route, index) => (\n      <TabItem\n        key={route.key}\n        isFocused={state.index === index}\n        title={descriptors[route.key].options.title || route.name}\n        onPress={() => {\n          navigation.dispatch({\n            type: 'JUMP_TO',\n            target: state.key,\n            payload: {\n              name: route.name,\n            },\n          });\n        }}\n      />\n    ));\n  const children = routes\n    .filter(({ key }, index) => !descriptors[key].options.hidden && state.index === index)\n    .map((route, index) => {\n      return (\n        <div\n          style={{\n            flex: 1,\n            display: 'flex',\n          }}>\n          {descriptors[route.key].render()}\n        </div>\n      );\n    });\n\n  return (\n    <div\n      style={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n      }}>\n      <NavigationMenu.Root\n        style={{\n          top: 24,\n          left: '50%',\n          transform: 'translateX(-50%)',\n          position: 'fixed',\n          zIndex: 10,\n        }}>\n        <NavigationMenu.List\n          style={{\n            display: 'flex',\n            backgroundColor: '#272727',\n            height: 40,\n            borderRadius: 25,\n            alignItems: 'center',\n            justifyContent: 'center',\n            padding: 5,\n            boxSizing: 'border-box',\n            margin: 0,\n          }}>\n          {items}\n        </NavigationMenu.List>\n      </NavigationMenu.Root>\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          zIndex: 0,\n          overflowY: 'auto',\n        }}>\n        {children}\n      </div>\n    </div>\n  );\n}\n\ninterface TabItemProps {\n  isFocused: boolean;\n  title: string;\n  onPress: () => void;\n}\n\nfunction TabItem(props: TabItemProps) {\n  const { isFocused, title, onPress } = props;\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  return (\n    <NavigationMenu.Item\n      style={{\n        listStyle: 'none',\n        margin: 0,\n        padding: 0,\n        listStylePosition: 'inside',\n        height: '100%',\n      }}>\n      <NavigationMenu.Trigger\n        onClick={onPress}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        style={{\n          backgroundColor: isFocused ? '#444444' : 'transparent',\n          border: 'none',\n          margin: 0,\n          height: '100%',\n          borderRadius: 20,\n          padding: '0 20px',\n          cursor: 'pointer',\n          outlineColor: '#444444',\n        }}>\n        <Text\n          style={{\n            color: isFocused ? 'white' : isHovered ? '#666666' : '#8b8b8b',\n            fontWeight: 500,\n            fontSize: 15,\n          }}>\n          {title}\n        </Text>\n      </NavigationMenu.Trigger>\n    </NavigationMenu.Item>\n  );\n}\n"]}